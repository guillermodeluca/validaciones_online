rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // === HELPER FUNCTIONS ===
    function isAuthenticated() {
      return request.auth != null;
    }

    function isDeveloper() {
      // Asegúrate de que estos UIDs sean solo para desarrollo o prueba
      return request.auth.uid == 'DxHQRjM8pueeB17aO048CMLlcIWC'
             || request.auth.uid == 'nTyLDaH1acQBmiMEmuXqMcfZgta2';
    }

    function isAdmin() {
      return isAuthenticated()
             && exists(/databases/$(database)/documents/users/$(request.auth.uid))
             && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // === COLLECTION-SPECIFIC RULES ===

    // Reglas para la colección 'users'
    match /users/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId
                  || isDeveloper()
                  || isAdmin();
      
      // Permite escribir solo si el usuario es el propietario y los campos de timestamp son correctos
      // O si es desarrollador/admin
      allow write: if (isAuthenticated() && request.auth.uid == userId
                       || isDeveloper()
                       || isAdmin())
                   && (request.resource.data.lastUpdated == null || request.resource.data.lastUpdated is timestamp)
                   && (request.resource.data.get('validationProcess.expirationDate') == null || request.resource.data.get('validationProcess.expirationDate') is timestamp);
    }

    // Reglas para la colección 'fiscalDataRequests'
    match /fiscalDataRequests/{fiscalRequestId} {
      allow create: if isAuthenticated()
                    && request.auth.uid == request.resource.data.userId
                    && request.resource.data.requestDate is timestamp;
      
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid
                  || isDeveloper()
                  || isAdmin();
      
      allow update: if (isAuthenticated() && resource.data.userId == request.auth.uid
                       || isDeveloper()
                       || isAdmin())
                    && (request.resource.data.requestDate == null || request.resource.data.requestDate is timestamp);
      
      allow delete: if isDeveloper() || isAdmin();
    }

    // Reglas para la colección 'equifaxValidations' (utilizada por tus Cloud Functions)
    match /equifaxValidations/{validationId} {
      // Un usuario autenticado puede CREAR un documento SI el 'userUid' en el documento es su propio UID.
      // Esto permite que la Cloud Function (que escribe como Admin SDK) cumpla la regla implícitamente
      // y evita escrituras maliciosas desde el cliente.
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userUid;

      // Permite leer si el usuario autenticado es el propietario del documento
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userUid
                  || isDeveloper()
                  || isAdmin();

      // Permite actualizar si el usuario autenticado es el propietario
      // (La Cloud Function submitEquifaxQuestionnaireAnswers actualiza este documento)
      allow update: if isAuthenticated() && request.auth.uid == resource.data.userUid
                   || isDeveloper()
                   || isAdmin();

      // Solo desarrolladores o administradores pueden eliminar
      allow delete: if isDeveloper() || isAdmin();
    }

    // Reglas para la colección 'validaciones' (Si es diferente a equifaxValidations)
    match /validaciones/{validationId} { 
      allow read: if isAuthenticated() && resource.data.ownerUid == request.auth.uid
                  || isDeveloper()
                  || isAdmin();
      // Decide si necesitas reglas de create/update/delete aquí también
      // allow write: if ...
    }

    match /stats/dashboard_metrics {
      allow read: if isAdmin() || isDeveloper();
    }

    // La regla comodín debe ir al final
    match /{document=**} {
      allow read, write: if isDeveloper();
    }
  }
}
